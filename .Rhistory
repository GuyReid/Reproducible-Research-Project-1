this_moment
?now
nyc <- now("America/New_York")
nyc
depart <- nyc+days(2)
depart
depart <- update(depart, hour=17, minutes=34, seconds=0)
depart <- update(depart, hour=17, minutes=34)
depart <- update(depart, hours=17, minutes=34)
depart
depart <- depart+hours(15)+minutes(50)
arrive <- depart+hours(15)+minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
depart
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50) + seconds(0)
info()
arrive <- depart + hours(15) + minutes(50)
skip()
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
skip()
nxt()
arrival = depart + hours(15) + minutes(50)
arrive = depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
nxt()
arrive <- depart + hours(15) + minutes (50)
skip()
info()
bye()
swirl()
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singaore")
last_time <-mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(dplyr)
cran <- tbl_df(mydata)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
?summarize
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs = 0.99)
top_unique <- filer(top_unque, unique > 465)
top_unique <- filter(top_unque, unique > 465)
top_unique <- filter(top_unique, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
?mutate
submit()
submit()
?filter
submit()
submit()
submit()
?spread
submit()
swirl()
library(tidyr)
studends
students
?gather
gather(students, sex, count, -grade)
student2
students2
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
seperate(res, sex_class, into=c("sex", "class"), sep="_")
separate(res, sex_class, into=c("sex", "class"), sep="_")
separate(res, sex_class, into=c("sex", "class"))
submit()
students3
submit()
submit()
submit()
submit()
student3
students3
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?chain
submit()
?spread
?spread
submit()
submit()
extract_numeric("class5")
?mutate
submit()
student4
students4
submit()
submit()
?unique
submit()
submit()
submit()
passed
failed
mutate(passed, status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status="failed")
?bind_rows
packageVersion('dplyr')
bind_rows(passed, failed)
sat
separate
?separate
submit()
?select
sat %>%
select(-contains(c("range", "male", "female"))) %>%
)
sat %>% select(-contains(c("range", "male", "female")))
sat %>% select(-contains(total)
)
sat %>% select(-contains("total"))
sat %>% select(-contains("total")) %>% gather(part_sex,count,-score_range)
submit()
submit()
sat %>% select(-contains("total")) %>% gather(part_sex,count,-score_range)%>%separate(part_sex,into=c("part","sex"))
submit()
submit()
submit()
submit()
sat %>%
select(-contains("total") %>%
gather(part_sex, score, -score_range) %>%
separate(part_sex, c("part","sex")) %>%
print
()
)
submit()
submit()
submit()
skip()
submit()
?pnorm
pnorm(1.51)
1-pnorm(1.51)
load(url("http://d396qusza40orc.cloudfront.net/statistics/project/gss.Rdata"))
activity <- read.csv("activity.csv")
```
2. Process/transform the data (if necessary) into a format suitable for your analysis
```{r}
# Convert factor date as date data type, as.Date(dates, "%y/%m/%d")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
```
##What is mean total number of steps taken per day?
For this part of the assignment, you can ignore the missing values in the dataset.
1. Calculate the total number of steps taken per day
```{r}
meansteps <- aggregate(steps ~ date, activity, mean, na.rm=TRUE)
names(meansteps)[names(meansteps)=="steps"] <- "mean steps"
meansteps
rm(e)
rm(x)
rm(y)
rm(best)
activity <- read.csv("activity.csv")
setwd("~/DataScienceCoursera/5. Reproducible Research")
activity <- read.csv("activity.csv")
```
2. Process/transform the data (if necessary) into a format suitable for your analysis
```{r}
# Convert factor date as date data type, as.Date(dates, "%y/%m/%d")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
```
##What is mean total number of steps taken per day?
For this part of the assignment, you can ignore the missing values in the dataset.
1. Calculate the total number of steps taken per day
```{r}
meansteps <- aggregate(steps ~ date, activity, mean, na.rm=TRUE)
names(meansteps)[names(meansteps)=="steps"] <- "mean steps"
meansteps
```
2. If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
```{r}
summary <- aggregate(steps ~ date, activity, sum, na.rm=TRUE)
plot(summary$steps ~ summary$date, type="h", lwd = 7, ylab="Frequency (steps)", xlab="Activity Days")
```
3. Calculate and report the mean and median of the total number of steps taken per day
```{r}
u <- subset(activity, steps!=is.na(steps))
tendency <- aggregate(steps ~ date, u, mean)
medianTendency  <- aggregate(steps ~ date, u, median)
tendency <- cbind(tendency, medianTendency$steps)
names(tendency)[names(tendency)=="steps"] <- "mean"
names(tendency)[names(tendency)=="medianTendency$steps"] <- "median"
tendency
```
##What is the average daily activity pattern?
1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
x <- aggregate(steps ~ interval, activity, mean, na.rm=TRUE)
plot(x, type="l", xlab="5-min Interval", ylab="Average Steps Taken")
```
2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
x$interval[x$steps==max(x$steps)]
```
##Imputing missing values
Note that there are a number of days/intervals where there are missing values (coded as NA). The presence of missing days may introduce bias into some calculations or summaries of the data.
1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
sum(is.na(activity$steps))
```
2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
Since most preponderance of missing data are complete days, impute no activity into the data set for missing values.  That is, impute a one for NA values in the data set.
3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
imputed <- activity
imputed$steps[is.na(imputed$steps)] <- 1
#cross check dimensions
dim(activity) == dim(imputed)
```
4.
a. Make a histogram of the total number of steps taken each day Calculate and report the mean and median total number of steps taken per day.
```{r}
imputedsum <- aggregate(steps ~ date, imputed, sum)
plot(imputedsum$steps ~ imputedsum$date, type="h", lwd = 7, ylab="Imputed Frequency (steps)", xlab="Imputed Activity Days")
```
b. Calculate and report the mean and median total number of steps taken per day.
```{r}
#s <- subset(activity, steps!=is.na(steps))
imputedmean <- aggregate(steps ~ date, imputed, mean)
imputedmedian  <- aggregate(steps ~ date, imputed, median)
imputeddata <- cbind(imputedmean, imputedmedian$steps)
names(imputeddata)[names(imputeddata)=="steps"] <- "mean"
names(imputeddata)[names(imputeddata)=="imputedmedian$steps"] <- "median"
imputeddata
imputedmean
head(imputed)
tail(imputed)
imputed
summarize(imputed)
summary(imputed)
summary(activity)
summary(weekend)
lapply(activity$steps, mean)
by(activity, stepm, mean)
by(activity, steps, mean)
activity <- read.csv("activity.csv")
```
2. Process/transform the data (if necessary) into a format suitable for your analysis
```{r}
# Convert factor date as date data type, as.Date(dates, "%y/%m/%d")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
```
##What is mean total number of steps taken per day?
For this part of the assignment, you can ignore the missing values in the dataset.
1. Calculate the total number of steps taken per day
```{r}
meansteps <- aggregate(steps ~ date, activity, mean, na.rm=TRUE)
names(meansteps)[names(meansteps)=="steps"] <- "mean steps"
meansteps
```
2. If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
```{r}
summary <- aggregate(steps ~ date, activity, sum, na.rm=TRUE)
plot(summary$steps ~ summary$date, type="h", lwd = 7, ylab="Frequency (steps)", xlab="Activity Days")
```
3. Calculate and report the mean and median of the total number of steps taken per day
```{r}
u <- subset(activity, steps!=is.na(steps))
tendency <- aggregate(steps ~ date, u, mean)
medianTendency  <- aggregate(steps ~ date, u, median)
tendency <- cbind(tendency, medianTendency$steps)
names(tendency)[names(tendency)=="steps"] <- "mean"
names(tendency)[names(tendency)=="medianTendency$steps"] <- "median"
tendency
```
##What is the average daily activity pattern?
1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
x <- aggregate(steps ~ interval, activity, mean, na.rm=TRUE)
plot(x, type="l", xlab="5-min Interval", ylab="Average Steps Taken")
```
2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
x$interval[x$steps==max(x$steps)]
```
##Imputing missing values
Note that there are a number of days/intervals where there are missing values (coded as NA). The presence of missing days may introduce bias into some calculations or summaries of the data.
1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
sum(is.na(activity$steps))
```
2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
Since most preponderance of missing data are complete days, impute no activity into the data set for missing values.  That is, impute a zero for NA values in the data set.
3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
imputed <- activity
imputed$steps[is.na(imputed$steps)] <- 1
#cross check dimensions
dim(activity) == dim(imputed)
```
4.
a. Make a histogram of the total number of steps taken each day Calculate and report the mean and median total number of steps taken per day.
```{r}
imputedsum <- aggregate(steps ~ date, imputed, sum)
plot(imputedsum$steps ~ imputedsum$date, type="h", lwd = 7, ylab="Imputed Frequency (steps)", xlab="Imputed Activity Days")
imputed$steps
imputed$steps[is.na(imputed$steps)] <- 0
#cross check dimensions
dim(activity) == dim(imputed)
```
4.
a. Make a histogram of the total number of steps taken each day Calculate and report the mean and median total number of steps taken per day.
```{r}
imputedsum <- aggregate(steps ~ date, imputed, sum)
plot(imputedsum$steps ~ imputedsum$date, type="h", lwd = 7, ylab="Imputed Frequency (steps)", xlab="Imputed Activity Days")
```
b. Calculate and report the mean and median total number of steps taken per day.
```{r}
#s <- subset(activity, steps!=is.na(steps))
imputedmean <- aggregate(steps ~ date, imputed, mean)
imputedmedian  <- aggregate(steps ~ date, imputed, median)
imputeddata <- cbind(imputedmean, imputedmedian$steps)
names(imputeddata)[names(imputeddata)=="steps"] <- "mean"
names(imputeddata)[names(imputeddata)=="imputedmedian$steps"] <- "median"
imputeddata
imputedsum$steps
imputed$steps
imputed <- activity
imputed$steps[is.na(imputed$steps)] <- 0
#cross check dimensions
dim(activity) == dim(imputed)
```
4.
a. Make a histogram of the total number of steps taken each day Calculate and report the mean and median total number of steps taken per day.
```{r}
imputedsum <- aggregate(steps ~ date, imputed, sum)
plot(imputedsum$steps ~ imputedsum$date, type="h", lwd = 7, ylab="Imputed Frequency (steps)", xlab="Imputed Activity Days")
```
b. Calculate and report the mean and median total number of steps taken per day.
```{r}
#s <- subset(activity, steps!=is.na(steps))
imputedmean <- aggregate(steps ~ date, imputed, mean)
imputedmedian  <- aggregate(steps ~ date, imputed, median)
imputeddata <- cbind(imputedmean, imputedmedian$steps)
names(imputeddata)[names(imputeddata)=="steps"] <- "mean"
names(imputeddata)[names(imputeddata)=="imputedmedian$steps"] <- "median"
imputeddata
```
imputedsum$steps
imputed$steps
imputedmedian$steps
imputed$steps
imputedmedian  <- aggregate(steps ~ date, imputed, median)
imputedmedian$steps
imputedmedian  <- aggregate(steps ~ date, imputed, sum)
imputedmedian$steps
imputedmedian
imputedmedian  <- aggregate(steps ~ date, imputed, median)
imputedmedian
shit <- by(imputed, date, median)
aggregate(steps, date, imputed, summary)
aggregate(steps ~ date, imputed, summary)
aggregate(steps ~ date, imputed, sum)
aggregate(steps ~ date, imputed, median)
aggregate(steps ~ date, imputed, mean)
aggregate(steps ~ date, imputed, mean)
?median
?odd
?even
?mod
2 mod 2
2 %% 2
3 %% 2
?aggregate
aggregate(imputed, median, simplify = TRUE)
aggregate(imputed$steps, median, simplify = TRUE)
aggregate(imputed$steps, imputed$date, median, simplify = TRUE)
imputedmedian  <- aggregate(steps ~ date, imputed, median)
imputedmedian  <- aggregate(steps ~ date, imputed, median)
imputemedian
imputmedian
imputedmedian
aggregate(steps ~ date, imputed, median)
aggregate(steps ~ date, activity, median)
aggregate(steps ~ date, u, median)
imputemean
imputemean
imputedmean
m <- c(mean,median)
imputedmean <- aggregate(steps ~ date, imputed, m)
imputedmean <- aggregate(steps ~ date, imputed, m)
imputedmean <- aggregate(steps ~ date, imputed, median
a
imputedmean <- aggregate(steps ~ date, imputed, median)
imputedmean
imputedmean <- aggregate(steps ~ date, imputed, mean)
imputed
?sort
u <- select(activity, steps!=is.na(steps))
tendency <- aggregate(steps ~ date, u, mean, na.rm=TRUE)
is.na(imputed$steps)
is.na(imputed$steps)
is.na(activity$steps)
imputed <- activity
imputed$steps[is.na(imputed$steps)] <- 0
# Note first day's steps were NA
head(imputed, 20)
tail(imputed, 20)
imputed[9905,]
sum(is.na(imputed$steps))
sum(!is.na(imputed$steps))
require(dplyr)
install.packages("doBy")
activity <- read.csv("activity.csv")
# Convert factor date as date data type, as.Date(dates, "%y/%m/%d")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
median(activity$steps, na.rm=T)
median(activity$interval, na.rm=T)
median(activity$steps)
median(activity$interval, na.rm=T)
median(activity$steps, na.rm=T)
activity$steps
imputed <- activity
median(imputed$steps)
median(imputed$steps, na.rm=T)
mean(imputed$steps, na.rm=T)
median(imputed$steps, na.rm=T)
shit <- imputed$steps
median(shit)
median(shit, na.rm=T)
shit
imputed$steps <- !imputed$steps[is.na(imputed$steps)]
imputed$steps <- imputed[is.na(imputed$steps)]
imputed$steps <- imputed$steps[!is.na(imputed$steps)]
is.na(imputed$steps)==TRUE
!is.na(imputed$steps)==TRUE
is.na(imputed$steps)
activity <- read.csv("activity.csv")
# Convert factor date as date data type, as.Date(dates, "%y/%m/%d")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
imputed <- activity
is.na(imputed$steps[1,])
is.na(imputed$steps[1:30,])
is.na(imputed$steps)
shit <- is.na(imputed$steps)
head(shit)
imputed$steps[is.na(imputed$steps)] <- 0
shit <- is.na(imputed$steps)
head(shit)
sum(is.na(imputed$steps))
#cross check again
sum(!is.na(imputed$steps))
median(imputed$steps)
imputed$steps[is.numberic(imputed$steps)]
imputed$steps[is.number(imputed$steps)]
imputed$steps[is.numeric(imputed$steps)]
median(imputed$steps)
61-53
8*2355
?mean
setwd("~/DataScienceCoursera/5. Reproducible Research/project")
install.packages("pander")
pandoc.convert(f="project1.rmd", format="pdf,options=-"S"")
pandoc.convert(f="project1.rmd", format="pdf,options=-"S")
pandoc.convert(f="project1.rmd", format="pdf",options=-"S")
setwd("~/DataScienceCoursera/5. Reproducible Research/project")
?knit2html
kint2html ("project.rmd")
install.packages("knitr")
setwd("~/DataScienceCoursera/5. Reproducible Research/project")
kint2html ("project.rmd")
require("knitr")
kint2html ("project.rmd")
library("knitr")
kint2html ("project.rmd")
kint2html ("project.rmd")
kint2html ("project.rmd")
